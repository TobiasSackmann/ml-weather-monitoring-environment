---
- name: Machine Learning Setup
  hosts: localhost
  vars_files:
    - vars.yaml
    - sample-vault.yaml
  tasks:
    - name: Create monitoring namespace
      kubernetes.core.k8s:
        name: machinelearning
        api_version: v1
        kind: Namespace
        state: present
    - name: Apply machine learning model deployment
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '{{ playbook_dir }}/../resources/deployment.yaml') | from_yaml }}"
    - name: Apply machine learning model service
      kubernetes.core.k8s:
        state: present
        definition: "{{ lookup('file', '{{ playbook_dir }}/../resources/service.yaml') | from_yaml }}"
    - name: Create monitoring namespace
      kubernetes.core.k8s:
        name: monitoring
        api_version: v1
        kind: Namespace
        state: present
    - name: Add stable grafana chart repo
      kubernetes.core.helm_repository:
        name: grafana
        repo_url: "https://grafana.github.io/helm-charts"
    - name: Add airflow chart repo
      kubernetes.core.helm_repository:
        name: apache-airflow
        repo_url: "https://airflow.apache.org/"
    - name: Deploy latest version of Grafana chart inside monitoring namespace with values
      kubernetes.core.helm:
        name: grafana
        chart_ref: grafana/grafana
        release_namespace: monitoring
        values:
          replicas: 1
          ingress:
            enabled: true
            hosts:
              - tig.grafana.local
            path: /
          dashboardProviders:
            dashboardproviders.yaml:
              apiVersion: 1
              providers:
                - name: 'default'
                  orgId: 1
                  folder: ''
                  type: file
                  disableDeletion: false
                  editable: true
                  options:
                    path: /var/lib/grafana/dashboards/default
          dashboards:
            default:
              weather-forecast:
                json: |
                  {{ lookup('file', 'grafana-dashboard.json') | indent(16) }}
          datasources:
            datasources.yaml:
              apiVersion: 1
              datasources:
                - name: InfluxDB
                  type: influxdb
                  access: proxy
                  url: http://influxdb-influxdb2.monitoring.svc.cluster.local:80
                  isDefault: true
                  jsonData:
                    version: Flux
                    organization: "{{ influxdb2_organization }}"
                    defaultBucket: "{{ influxdb2_bucket }}"
                    tlsSkipVerify: "{{ influxdb2_tlsSkipVerify }}"
                  secureJsonData:
                    token: "{{ grafana_secure_token }}"
    - name: Create PersistentVolume
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: airflow-pv
          spec:
            capacity:
              storage: 1Gi
            accessModes:
              - ReadWriteMany
            persistentVolumeReclaimPolicy: Retain
            storageClassName: manual
            hostPath:
              path: "{{ airflow_pv_target_dir }}"
    - name: Create airflow namespace
      kubernetes.core.k8s:
        name: airflow
        api_version: v1
        kind: Namespace
        state: present
    - name: Create Airflow PersistentVolumeClaim
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: airflow-pvc
            namespace: "{{ airflow_namespace }}"
          spec:
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: 1Gi
            storageClassName: manual
    - name: Create a temporary pod
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: file-uploader
            namespace: "{{ airflow_namespace }}"
          spec:
            containers:
              - name: busybox
                image: busybox
                command: ["sleep", "3600"]
                volumeMounts:
                  - mountPath: "{{ airflow_pv_target_dir }}"
                    name: storage
            volumes:
              - name: storage
                persistentVolumeClaim:
                  claimName: "{{ pvc_name }}"
      vars:
        pvc_name: airflow-pvc
    - name: Wait for the pod to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        name: file-uploader
        namespace: "{{ airflow_namespace }}"
      register: pod_info
      until: pod_info.resources[0].status.phase == "Running"
      retries: 10
      delay: 5
    - name: Copy local files to the PVC through the Pod
      ansible.builtin.command: >
        kubectl cp {{ local_path }} file-uploader:"{{ airflow_pv_target_dir }}" -n "{{ airflow_namespace }}"
      vars:
        local_path: "{{ airflow_local_source_dir }}"  # Path to the file/folder you want to copy
      changed_when: false
    - name: List files in the PVC directory
      ansible.builtin.command: >
        kubectl exec file-uploader -n {{ airflow_namespace }} -- ls "{{ airflow_pv_target_dir }}"
      register: pod_files
      changed_when: false
    - name: Delete the temporary pod
      kubernetes.core.k8s:
        state: absent
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: file-uploader
            namespace: "{{ airflow_namespace }}"
    - name: Deploy latest version of Apache Airlfow chart inside its own namespace with values
      kubernetes.core.helm:
        name: airflow
        chart_ref: apache-airflow/airflow
        release_namespace: airflow
        values:
          config:
            webserver:
              expose_config: true
          dags:
            persistence:
              enabled: true
              existingClaim: airflow-pvc
            gitSync:
              enabled: false
          ingress:
            web:
              enabled: true
              path: "/"
              hosts:
                - apache-airflow.local
          env:
            - name: "influxdb2_token"
              value: "{{ influxdb2_token }}"
          defaultAirflowRepository: "{{ hostvars['docker_registry']['ansible_host'] }}:5000/custom-airflow"
          defaultAirflowTag: "{{ airflow_image_tag }}"
